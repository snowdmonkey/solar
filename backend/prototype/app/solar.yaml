swagger: '2.0'
info:
  description: API document for solar panel inspectation backend
  version: 1.0.0
  title: Solar panel inspection
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: '127.0.0.1:5000'
basePath: /
tags:
  - name: station
    description: all about station
  - name: date
    description: all about the dates of available reports
  - name: defects
    description: all about defects
  - name: images
    description: all about images
  - name: temperature
    description: all about Celsius temperature of an IR image
schemes:
  - http
paths:
  /api/v1/station:
    get:
      tags:
        - station
      summary: get available stations
      description: ''
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/Station'
    post:
      tags:
        - station
      summary: add a station
      produces:
        - text/plain
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Station'
      responses:
        '200':
          description: success
  '/api/v1/station/{stationId}':
    get:
      tags:
        - station
      summary: get a station
      description: get the information of a station by id
      produces:
        - application/json
      parameters:
        - name: stationId
          type: string
          in: path
          required: true
          description: 'e.g., linuo'
      responses:
        '200':
          description: success
        '404':
          description: station not found
  /api/v1/status:
    get:
      tags:
        - station
      summary: get status of all available stations
      description: status includes station info and summary of last inspection
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/StationInfo'
        '400':
          description: Bad request
  '/api/v1/station/{stationId}/date/{date}/status':
    get:
      tags:
        - station
      summary: get status of the specific station and date
      description: >-
        status includes the numbers of the defect categories: healthy,
        toconfirm, tofix, and also the date
      produces:
        - application/json
      parameters:
        - name: stationId
          in: path
          required: true
          type: string
          description: 'e.g., LN0001'
        - name: date
          in: path
          required: true
          type: string
          description: date string in YYYY-MM-DD
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/StationStatus'
        '404':
          description: Status info not found on the date of the station
  '/api/v1/station/{stationId}/status/start/{start}/end/{end}':
    get:
      tags:
        - station
      summary: get status of the specific station and the time period
      description: >-
        status includes the numbers of the defect categories: healthy,
        toconfirm, tofix, and also the date
      produces:
        - application/json
      parameters:
        - name: stationId
          in: path
          required: true
          type: string
          description: 'e.g., LN0001'
        - name: start
          in: path
          required: true
          type: string
          description: start date string in YYYY-MM-DD
        - name: end
          in: path
          required: true
          type: string
          description: end date string in YYYY-MM-DD
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/StationStatus'
        '404':
          description: Status info not found on the period of the station
  '/api/v1/station/{stationId}/status/start/{start}':
    get:
      tags:
        - station
      summary: get status of the specific station since the start date
      description: >-
        status includes the numbers of the defect categories: healthy,
        toconfirm, tofix, and also the date
      produces:
        - application/json
      parameters:
        - name: stationId
          in: path
          required: true
          type: string
          description: 'e.g., LN0001'
        - name: start
          in: path
          required: true
          type: string
          description: start date string in YYYY-MM-DD
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/StationStatus'
        '404':
          description: Status info not found on the period of the station
  '/api/v1/station/{stationId}/date':
    get:
      tags:
        - date
      summary: get the dates of available reports of a station
      produces:
        - application/json
      parameters:
        - name: stationId
          in: path
          required: true
          type: string
          description: 'e.g., LN0001'
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/Date'
  '/api/v1/station/{stationId}/date/{date}/defects':
    get:
      tags:
        - defects
      summary: get a list of defects by station and date
      parameters:
        - name: stationId
          type: string
          in: path
          required: true
          description: 'e.g., linuo'
        - in: path
          name: date
          required: true
          type: string
        - in: query
          name: category
          required: false
          type: string
          description: 'e.g., ?category=1,2 will query defects with category 1 or 2'
        - name: sortby
          in: query
          required: false
          type: string
          enum:
            - category
            - severity
          description: 'the key to sort the defects, can be "category" or "severtiy"'
        - name: order
          in: query
          required: false
          type: string
          enum:
            - reverse
          description: >-
            if order=reverse, the defects will be sorted as descending,
            otherwise ascending
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/Defect'
    put:
      tags:
        - defects
      summary: batch set the category of defects
      parameters:
        - name: stationId
          type: string
          in: path
          required: true
        - name: date
          required: true
          type: string
          in: path
        - name: body
          required: true
          in: body
          schema:
            type: object
            properties:
              ids:
                type: array
                items:
                  type: str
                example: ["DEF1", "DEF2"]
              category:
                $ref: '#/definitions/DefectCategory'
      produces:
        - text/plain
      responses:
        '200':
          description: success
  '/api/v1/station/{stationId}/date/{date}/analysis':
    post:
      tags:
        - defects
      summary: image analysis trigger
      description: >-
        trigger the analysis create_profile of a batch of images by station and
        date
      parameters:
        - name: stationId
          type: string
          in: path
          required: true
          description: 'e.g., linuo'
        - name: date
          type: string
          in: path
          required: true
      produces:
        - text/plain
      responses:
        '200':
          description: success
  '/api/v1/station/{stationId}/date/{date}/defect/{defectId}':
    put:
      tags:
        - defects
      summary: set a defect's category and gps
      parameters:
        - name: stationId
          description: 'e.g., linuo'
          type: string
          in: path
          required: true
        - name: date
          type: string
          in: path
          required: true
        - name: defectId
          type: string
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              lat:
                type: number
                example: 36.6551991831705
              lng:
                type: number
                example: 117.2324184458665
              cat:
                $ref: '#/definitions/DefectCategory'
      produces:
        - text/plain
      responses:
        '200':
          description: success
  '/api/v1/station/{stationId}/date/{date}/defect/{defectId}/images/ir':
    get:
      tags:
        - images
      summary: get a list of IR images relate to a defect
      parameters:
        - name: stationId
          type: string
          in: path
          required: true
        - name: date
          type: string
          in: path
          required: true
        - name: defectId
          type: string
          in: path
          required: true
        - name: colorMap
          type: string
          enum:
            - autumn
            - bone
            - jet
            - winter
            - rainbow
            - ocean
            - summer
            - spring
            - cool
            - hsv
            - pink
            - hot
          in: query
          required: false
          description: color map for the ir image
      description: a list of IR images that captures a defect
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              type: object
              properties:
                imageName:
                  $ref: '#/definitions/ImageName'
                latitude:
                  type: number
                longitude:
                  type: number
                url:
                  type: string
  '/api/v1/station/{stationId}/date/{date}/defect/{defectId}/images/visual':
    get:
      tags:
        - images
      summary: get a list of visual images relate to a defect
      parameters:
        - name: stationId
          type: string
          in: path
          required: true
        - name: date
          type: string
          in: path
          required: true
        - name: defectId
          type: string
          in: path
          required: true
      description: a list of visual images that relates a defect
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              type: object
              properties:
                imageName:
                  $ref: '#/definitions/ImageName'
                latitude:
                  type: number
                longitude:
                  type: number
                url:
                  type: string
  '/api/v1/station/{stationId}/date/{date}/image/ir/{image}':
    get:
      tags:
        - images
      summary: get an infrared image
      parameters:
        - name: stationId
          type: string
          in: path
          required: true
        - name: date
          type: string
          in: path
          required: true
        - name: image
          type: string
          in: path
          required: true
          description: base name of a image
        - name: colorMap
          type: string
          enum:
            - autumn
            - bone
            - jet
            - winter
            - rainbow
            - ocean
            - summer
            - spring
            - cool
            - hsv
            - pink
            - hot
          in: query
          required: false
          description: 'if not provided, render a gray scale image'
        - name: defect
          type: string
          in: query
          required: false
          description: 'if it is given, label the defect on the map'
      description: 'get the infrared image by image name, also can label a given defect'
      produces:
        - image/png
      responses:
        '200':
          description: success
  '/api/v1/station/{stationId}/date/{date}/image/visual/{image}':
    get:
      tags:
        - images
      parameters:
        - name: stationId
          type: string
          in: path
          required: true
        - name: date
          type: string
          in: path
          required: true
        - name: image
          type: string
          in: path
          required: true
          description: base name of a image
      description: 'get visible ligth image by station, date and image name'
      summary: get a visible light image
      produces:
        - image/png
      responses:
        '200':
          description: success
  '/api/v1/station/{stationId}/date/{date}/image/{image}/temperature/point':
    get:
      tags:
        - temperature
      summary: get temperature at a pixel
      description: get celsius temperature at a given pixel on an IR image
      parameters:
        - name: stationId
          type: string
          in: path
          required: true
        - name: date
          type: string
          in: path
          required: true
        - name: image
          type: string
          in: path
          required: true
          description: base name of a image
        - name: row
          type: number
          in: query
          required: true
          description: row number of the given pixel scaled by the height of the image
        - name: col
          type: number
          in: query
          required: true
          description: column number of the given pixel scaled by the width of the image
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            type: object
            properties:
              temperature:
                type: number
                example: 56.1
  '/api/v1/station/{stationId}/date/{date}/image/{image}/temperature/range':
    get:
      tags:
        - temperature
      summary: get temperature in a range
      description: get statistics of Celsius temperature in a rectangle area on an IR image
      parameters:
        - name: stationId
          type: string
          in: path
          required: true
        - name: date
          type: string
          in: path
          required: true
        - name: image
          type: string
          in: path
          required: true
          description: base name of a image
        - name: top
          type: integer
          in: query
          required: true
          description: top row number of the given range scaled by the height of the image
        - name: btm
          type: integer
          in: query
          required: true
          description: >-
            bottom row number of the given range scaled by the height of the
            image
        - name: left
          type: integer
          in: query
          required: true
          description: >-
            left column number of the given range scaled by the width of the
            image
        - name: right
          type: integer
          in: query
          required: true
          description: >-
            right column number of the given range scaled by the width of the
            image
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            type: object
            properties:
              max:
                type: number
              min:
                type: number
              mean:
                type: number
              maxPos:
                type: object
                description: pixel pisition of the maximun temperature
                properties:
                  col:
                    type: integer
                  row:
                    type: integer
              minPos:
                type: object
                description: pixel pisition of the minimum temperature
                properties:
                  col:
                    type: integer
                  row:
                    type: integer
definitions:
  Date:
    type: string
    example: '2017-09-19'
  GPS:
    type: array
    items:
      type: number
    example:
      - 36.6551991831705
      - 117.2324184458665
    description: 'latitude, longitude'
  StationId:
    type: string
    example: linuo
  Station:
    type: object
    properties:
      stationId:
        $ref: '#/definitions/StationId'
      stationName:
        type: string
        example: linuo
      description:
        type: string
        example: test station
      gps:
        $ref: '#/definitions/GPS'
    required:
      - stationId
      - stationName
      - gps
  Defect:
    type: object
    properties:
      defectId:
        type: string
        example: DEF00002
      latitude:
        type: number
      longitude:
        type: number
      category:
        $ref: '#/definitions/DefectCategory'
      groupId:
        type: string
      severity:
        type: number
  DefectCategory:
    type: integer
    enum:
      - -1
      - 0
      - 1
      - 2
    description: >-
      -1 means warning, 0 means pending confirmation, 1 means under repairing,
      i.e., 2 means healthy
  ImageName:
    type: string
    example: DJI_0004
  StationInfo:
    type: object
    properties:
      station:
        $ref: '#/definitions/Station'
      status:
        $ref: '#/definitions/StationStatus'
  StationStatus:
    type: object
    properties:
      date:
        type: string
        example: '2017-09-19'
      healthy:
        type: integer
      toconfirm:
        type: integer
      tofix:
        type: integer
