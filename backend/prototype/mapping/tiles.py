"""
this module aims to generate tiles from the stitch panorama that is generated by pix4d
"""
import json
from typing import Optional
from wand.image import Image
from geo_mapper import GeoMapper, TifGeoMapper
import os


class TileGenerator:

    def __init__(self, tile_size: float, resolution: Optional[int] = None, overlap: float = 0.5):
        """
        constructor
        :param tile_size: size of the area each tile covers, in meters
        :param resolution: resolution of each tile, if it is None, resolution will remain the same with the source image
        :param overlap: overlap between adjacent tiles, in meters
        """
        self._tile_size = tile_size
        self._resolution = resolution
        self._overlap = overlap

    def process(self, image_path: str, mapper: Optional[GeoMapper] = None, output_folder: str = "."):
        """
        generate tiles for the image at a given path with a a given geo mapper
        :param image_path: the path of the image to process
        :param mapper: a geo mapper of the image. If can be None if the image is a GeoTiff
        :param output_folder: path of the folder to save the results
        """
        image = Image(filename=image_path)

        if mapper is None:
            mapper = TifGeoMapper(image_path)

        gsd = mapper.gsd

        tile_size_in_pixel = int(self._tile_size/gsd)
        overlap_in_pixel = int(self._overlap/gsd)

        top_left_pixels = [(row, col)
                           for row in range(0, image.height, tile_size_in_pixel)
                           for col in range(0, image.width, tile_size_in_pixel)]

        i = 0
        coordinates = list()
        for top_left_pixel in top_left_pixels:
            top = top_left_pixel[0]
            left = top_left_pixel[1]
            btm = top + tile_size_in_pixel + overlap_in_pixel
            right = left + tile_size_in_pixel + overlap_in_pixel

            if btm > image.height:
                btm = image.height

            if right > image.width:
                right = image.width

            if not os.path.isdir(output_folder):
                os.mkdir(output_folder)

            if not os.path.isdir(os.path.join(output_folder, "tiles")):
                os.mkdir(os.path.join(output_folder, "tiles"))

            with image[left: right, top: btm] as sub_image:
                if self._resolution is not None:
                    sub_image.resize(self._resolution, self._resolution)

                sub_image.save(filename=os.path.join(output_folder, "tiles", "{}.png".format(i)))

            top_left_gps = mapper.pixel2gps(row=top, col=left)
            btm_right_gps = mapper.pixel2gps(row=btm, col=right)

            coordinate = {
                "name": "{}.png".format(i),
                "p1": {"lat": top_left_gps[0], "lng": top_left_gps[1]},
                "p2": {"lat": btm_right_gps[0], "lng": btm_right_gps[1]}}
            coordinates.append(coordinate)

            i += 1

        with open(os.path.join(output_folder, "position.json"), "w") as f:
            json.dump(coordinates, f)


def main():
    import argparse

    parser = argparse.ArgumentParser(description="get tiles from panorama")
    parser.add_argument("--tile-size", type=float, help="size of the area each tile covers, in meters", default=30.0)
    parser.add_argument("--tile-resolution", type=int, help="resolution for each tile", default=None)
    parser.add_argument("--overlap", type=float, help="overlap between two tiles, in meters", default=0.5)
    parser.add_argument("--output-folder", type=str, help="folder to save the result", default=".")
    parser.add_argument("image_path", type=str, help="path of the panorama image")

    args = parser.parse_args()

    generator = TileGenerator(tile_size=args.tile_size, resolution=args.tile_resolution, overlap=args.overlap)
    generator.process(image_path=args.image_path, output_folder=args.output_folder)


if __name__ == "__main__":
    main()





